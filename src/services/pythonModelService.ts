
import { Ship, Dock, Allocation, PythonModelParams, PythonModelResult, WeatherData } from '@/types/types';

// Funci√≥n para detectar la URL base del API Python seg√∫n el entorno
const getPythonApiBaseUrl = (): string => {
  const hostname = window.location.hostname;
  const port = window.location.port;
  const protocol = window.location.protocol;
  
  console.log(`üîç Detectando entorno de ejecuci√≥n:`);
  console.log(`  - hostname: "${hostname}"`);
  console.log(`  - port: "${port}"`);
  console.log(`  - protocol: "${protocol}"`);
  console.log(`  - full URL: "${window.location.href}"`);
  
  // Detecci√≥n mejorada para diferentes entornos
  
  // 1. GitHub Codespaces
  if (hostname.includes('github.dev') || hostname.includes('githubpreview.dev') || hostname.includes('codespaces.githubusercontent.com')) {
    const pythonUrl = `https://${hostname.replace('-5173', '-5000')}`;
    console.log(`‚úÖ Entorno GitHub Codespaces detectado`);
    console.log(`üì° URL de la API Python: ${pythonUrl}`);
    return pythonUrl;
  }
  
  // 2. Lovable (entorno remoto - Python no disponible)
  if (hostname.includes('lovableproject.com')) {
    console.log(`‚ùå Entorno Lovable (remoto) detectado`);
    console.log(`‚ùå API Python no disponible en entorno Lovable (remoto)`);
    console.log(`üí° Para usar la API Python:`);
    console.log(`   ‚Ä¢ Ejecuta en GitHub Codespaces, o`);
    console.log(`   ‚Ä¢ Clona y ejecuta localmente`);
    return 'http://localhost:5000'; // Fallback que fallar√° intencionalmente
  }
  
  // 3. Entorno local mejorado (localhost o 127.0.0.1 con cualquier puerto o sin puerto)
  if (hostname === 'localhost' || hostname === '127.0.0.1') {
    const pythonUrl = `http://${hostname}:5000`;
    console.log(`‚úÖ Entorno LOCAL detectado (Visual Studio Code)`);
    console.log(`üì° URL de la API Python: ${pythonUrl}`);
    console.log(`üöÄ VERIFICACI√ìN PARA ENTORNO LOCAL:`);
    console.log(`   üìç Frontend corriendo en: ${window.location.href}`);
    console.log(`   üìç API Python deber√≠a estar en: ${pythonUrl}`);
    console.log(`   üìç Puerto frontend detectado: ${port || 'sin puerto espec√≠fico'}`);
    console.log(`   üìç Hostname detectado: ${hostname}`);
    console.log(``);
    console.log(`üîß INSTRUCCIONES PARA ENTORNO LOCAL:`);
    console.log(`   TERMINAL 1 (API Python):`);
    console.log(`   1. cd src/python`);
    console.log(`   2. pip install -r requirements.txt`);
    console.log(`   3. python api.py`);
    console.log(`   4. Verifica que aparezca: 'Running on http://127.0.0.1:5000'`);
    console.log(``);
    console.log(`   TERMINAL 2 (Frontend):`);
    console.log(`   1. npm run dev`);
    console.log(`   2. Accede a la URL que muestre Vite`);
    console.log(``);
    console.log(`   ‚ö†Ô∏è IMPORTANTE: Ambos deben estar ejecut√°ndose simult√°neamente`);
    console.log(`   ‚ö†Ô∏è Si usas puerto ${port}, aseg√∫rate que Python est√© en puerto 5000`);
    return pythonUrl;
  }
  
  // 4. Cualquier otro entorno - asumir local
  console.log(`‚ö†Ô∏è Entorno desconocido detectado (${hostname})`);
  console.log(`üîß Asumiendo entorno local - usando localhost:5000`);
  const defaultUrl = 'http://localhost:5000';
  console.log(`üì° URL de la API Python: ${defaultUrl}`);
  return defaultUrl;
};

/**
 * Ejecuta el modelo de optimizaci√≥n Python
 * @param params Par√°metros para el modelo
 * @returns Resultado del modelo de optimizaci√≥n
 */
export const runPythonAllocationModel = async (
  params: PythonModelParams,
  weatherData: WeatherData
): Promise<PythonModelResult> => {
  const API_BASE_URL = getPythonApiBaseUrl();
  
  try {
    console.log("üöÄ Enviando datos al modelo Python en:", API_BASE_URL);
    console.log("üìä Par√°metros del modelo:", params);
    
    // Crear el cuerpo de la solicitud
    const requestBody = {
      ...params,
      weatherData
    };
    
    // Llamar a la API Python
    const response = await fetch(`${API_BASE_URL}/api/allocation-model`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error en la llamada a la API Python: ${response.status} ${response.statusText} - ${errorText}`);
    }
    
    // Convertir respuesta a JSON
    const result: PythonModelResult = await response.json();
    console.log("‚úÖ Resultado del modelo Python recibido:", result);
    
    // Verificar y corregir el formato de los resultados
    // Asegurarse de que todas las fechas est√©n en formato ISO
    if (result.allocations) {
      result.allocations = result.allocations.map(allocation => ({
        ...allocation,
        startTime: new Date(allocation.startTime).toISOString(),
        endTime: new Date(allocation.endTime).toISOString(),
        created: new Date(allocation.created).toISOString(),
      }));
    }
    
    return result;
  } catch (error) {
    console.error("‚ùå Error al ejecutar el modelo Python:", error);
    throw error;
  }
};

/**
 * Funci√≥n de utilidad que permite probar la conexi√≥n a la API Python
 */
export const testPythonApiConnection = async (): Promise<boolean> => {
  const API_BASE_URL = getPythonApiBaseUrl();
  
  try {
    console.log("üîç Probando conexi√≥n con API Python en:", API_BASE_URL);
    console.log("üåê Informaci√≥n detallada del entorno:");
    console.log("  - hostname:", window.location.hostname);
    console.log("  - port:", window.location.port);
    console.log("  - protocol:", window.location.protocol);
    console.log("  - full URL:", window.location.href);
    console.log("  - user agent:", navigator.userAgent);
    
    // Detectar si estamos en Lovable (entorno remoto)
    if (window.location.hostname.includes('lovableproject.com')) {
      console.log("‚ùå API Python no disponible en entorno Lovable (remoto)");
      console.log("üí° Para usar la API Python:");
      console.log("   ‚Ä¢ Ejecuta en GitHub Codespaces, o");
      console.log("   ‚Ä¢ Clona y ejecuta localmente");
      return false;
    }
    
    // Log adicional para debugging en entorno local
    console.log("üß™ Intentando conectar con API Python...");
    console.log("üì° URL objetivo:", `${API_BASE_URL}/api/health`);
    
    // Intentamos hacer una petici√≥n simple para ver si la API est√° disponible
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      console.log("‚è∞ Timeout de conexi√≥n alcanzado (15 segundos)");
      console.log("üí° Esto puede indicar que el servidor Python no est√° ejecut√°ndose");
      controller.abort();
    }, 15000); // 15 segundos de timeout (aumentado para entorno local)
    
    console.log("üì° Enviando petici√≥n de health check...");
    const startTime = Date.now();
    
    const response = await fetch(`${API_BASE_URL}/api/health`, {
      method: 'GET',
      signal: controller.signal,
      mode: 'cors', // Asegurar que las peticiones CORS funcionen
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    clearTimeout(timeoutId);
    console.log(`‚è±Ô∏è Tiempo de respuesta: ${responseTime}ms`);
    
    const isAvailable = response.ok;
    
    if (isAvailable) {
      const healthData = await response.json();
      console.log("‚úÖ API Python DISPONIBLE en", API_BASE_URL);
      console.log("üìä Informaci√≥n del servidor Python:", healthData);
      console.log("üéâ Conexi√≥n exitosa establecida!");
    } else {
      console.log("‚ùå API Python NO DISPONIBLE en", API_BASE_URL);
      console.log("üìÑ Response status:", response.status);
      console.log("üìÑ Response statusText:", response.statusText);
      
      // Intentar leer el body de la respuesta para m√°s informaci√≥n
      try {
        const responseText = await response.text();
        console.log("üìÑ Response body:", responseText);
      } catch (e) {
        console.log("üìÑ No se pudo leer el body de la respuesta");
      }
      
      // Dar instrucciones espec√≠ficas para entorno local
      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        console.log("üîß SOLUCI√ìN PARA ENTORNO LOCAL (Visual Studio Code):");
        console.log("   üö® PROBLEMA DETECTADO: El servidor Python NO est√° respondiendo");
        console.log("   üìã PASOS PARA SOLUCIONAR:");
        console.log("   ");
        console.log("   TERMINAL 1 (API Python):");
        console.log("   1. Abre una nueva terminal en Visual Studio Code");
        console.log("   2. Navega a: cd src/python");
        console.log("   3. Instala dependencias: pip install -r requirements.txt");
        console.log("   4. Ejecuta: python api.py");
        console.log("   5. Espera a ver: '* Running on http://127.0.0.1:5000'");
        console.log("   6. NO cierres esta terminal");
        console.log("   ");
        console.log("   TERMINAL 2 (Frontend):");
        console.log("   1. En otra terminal ejecuta: npm run dev");
        console.log("   2. Accede a la URL que muestre (ej: localhost:8081)");
        console.log("   ");
        console.log("   ‚ö†Ô∏è VERIFICACIONES:");
        console.log("   ‚Ä¢ Ambos procesos deben estar ejecut√°ndose al mismo tiempo");
        console.log("   ‚Ä¢ El Python debe mostrar: 'Running on http://127.0.0.1:5000'");
        console.log("   ‚Ä¢ Si ves puerto 5001, para el proceso y vuelve a ejecutar");
        console.log("   ‚Ä¢ Revisa si hay firewall bloqueando el puerto 5000");
      }
    }
    
    return isAvailable;
  } catch (error) {
    console.error("‚ùå Error al conectar con API Python:", error);
    
    // Proporcionar informaci√≥n m√°s detallada del error para entorno local
    if (error instanceof Error) {
      console.log("üîç An√°lisis del error:");
      console.log("   ‚Ä¢ Tipo de error:", error.name);
      console.log("   ‚Ä¢ Mensaje:", error.message);
      
      if (error.name === 'AbortError') {
        console.log("‚è∞ TIMEOUT: La conexi√≥n fue cancelada por timeout");
        console.log("üí° CAUSA PROBABLE: El servidor Python NO est√° ejecut√°ndose");
      } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        console.log("üîó ERROR DE RED: No se puede conectar con el servidor");
        console.log("üîß CAUSAS POSIBLES:");
        console.log("   1. ‚ùå El servidor Python NO est√° ejecut√°ndose");
        console.log("   2. ‚ùå El servidor Python est√° en un puerto diferente");
        console.log("   3. ‚ùå Firewall bloqueando el puerto 5000");
        console.log("   4. ‚ùå CORS no configurado correctamente");
        
        // Instrucciones espec√≠ficas para el entorno actual
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
          console.log("");
          console.log("üöÄ SOLUCI√ìN PASO A PASO (Visual Studio Code):");
          console.log("   ");
          console.log("   üî¥ PASO 1: Verificar que Python est√© ejecut√°ndose");
          console.log("   ‚Ä¢ Abre una terminal nueva");
          console.log("   ‚Ä¢ Ejecuta: cd src/python");
          console.log("   ‚Ä¢ Ejecuta: python api.py");
          console.log("   ‚Ä¢ Debe mostrar: '* Running on http://127.0.0.1:5000'");
          console.log("   ");
          console.log("   üî¥ PASO 2: Mantener ambos procesos ejecut√°ndose");
          console.log("   ‚Ä¢ Terminal 1: python api.py (NO cerrar)");
          console.log("   ‚Ä¢ Terminal 2: npm run dev (en la ra√≠z del proyecto)");
          console.log("   ");
          console.log("   üî¥ PASO 3: Verificar en el navegador");
          console.log("   ‚Ä¢ Abre el frontend en la URL que muestre npm run dev");
          console.log("   ‚Ä¢ Deber√≠as ver 'Modelo Matem√°tico Python Conectado'");
          console.log("   ");
          console.log("   ‚ö†Ô∏è SI SIGUE FALLANDO:");
          console.log("   ‚Ä¢ Verifica que no tengas antivirus bloqueando");
          console.log("   ‚Ä¢ Intenta acceder a: http://localhost:5000/api/health");
          console.log("   ‚Ä¢ Si no funciona, el problema es con el servidor Python");
        }
      } else if (error.message.includes('CORS')) {
        console.log("üîí ERROR CORS: Problema de pol√≠tica de origen cruzado");
        console.log("üí° SOLUCI√ìN: Aseg√∫rate de que el servidor Python est√© configurado correctamente");
      }
    }
    
    return false;
  }
};
